﻿@{
    ViewData["Title"] = "Home Page";
}

<style>
    .contenido {
        min-height: 100vh !important;
        display: flex;
        flex-direction: column;
    }
    .dropArea {
        border: 2px dashed #CCC;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        transition: border-color 0.3s;
        height: 300px;
        border-radius: 1rem;
    }
        .dropArea.highlight {
            border-color: #007bff;
        }
    .glyphicon-cloud-upload {
        font-size: 50px;
        color: #007bff;
    }
    .droptxt {
        font-size: 1.2rem;
        margin-top: 20px !important;
        color: #949494;
        margin: 0;
    }
    .areaArchivo :hover {
        background: #F2FAFD;
    }
    .modal-header{
        background-color: #F9F9F9;
    }
    .table{
        overflow: auto;
        box-shadow: 0 .25rem .25rem 0 #CCC;
        margin: 5rem 0 8rem 0 !important;
        table-layout: fixed;
        width: 100%;
    }
    .button-icon{
        border: none;
        background: transparent;
        margin: 0;
        padding: 0;
    }
    td {
        white-space: nowrap; /* Evita que el texto se ajuste en múltiples líneas */
        overflow: hidden; /* Oculta el contenido que excede el ancho de la celda */
        text-overflow: ellipsis; /* Muestra "..." si el contenido es demasiado largo */
    }
    .consultas-bfa{
        width: 100% !important;
        margin-bottom: 10rem !important;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5); /* Fondo oscurecido */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050; /* Asegura que esté sobre otros elementos */
    }
</style>

<!-- Alerta Danger -->
<div class="alert alert-danger alert-dismissible fade show mb-3 p-2 px-3" id="alertDanger" role="alert">
    <i class="fa-solid fa-triangle-exclamation" style="margin-right: .5rem;"></i><span id="alertDangerMensaje"></span>
</div>

<div class="text-center contenido">
    <h1 class="display-4 mb-5">Documentos</h1>

    <form asp-action="UploadPdf" method="post" enctype="multipart/form-data">
        <div class="areaArchivo">
            <!-- Área de arrastrar y soltar -->
            <div aria-live="polite" class="dropArea d-flex justify-content-center align-items-center" id="dropArea">
                <input type="file" id="pdfFile" name="pdfFile" accept="application/pdf" required hidden multiple>

                <div>
                    <div>
                        <div>
                            <span aria-hidden="true" class="glyphicon glyphicon-cloud-upload"></span>
                        </div>
                        <i style="font-size: 50px; color: #FF7272;" class="fa-regular fa-file-pdf mb-1"></i>
                        <div class="droptxt">Arrastre o seleccione archivos PDF</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-2 text-center">
            <strong>Nombre de archivo:</strong> <span id="fileName">Ningún archivo seleccionado</span>
        </div>

        <!-- Botón de enviar (deshabilitado inicialmente) -->
        <div>
            <button type="button" class="btn btn-outline-primary mt-4 btn-lg mx-1" onclick="limpiar();" style="width: 10rem;">
                <i class="fa-solid fa-broom" style="margin-right: .25rem;"></i>
                Limpiar
            </button>
            <button type="button" id="uploadBtn" class="btn btn-primary mt-4 btn-lg mx-1" disabled style="width: 10rem;">
                <i class="fa-solid fa-upload" style="margin-right: .25rem;"></i>
                Subir PDF
            </button>
        </div>
    </form>

    <!-- Tabla -->
    <table id="tableArchivos" class="table table-striped table-light" border="1">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Hash</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody id="tableArchivosBody">
            <tr>
                <td colspan="3" class="text-center">No hay resultados disponibles</td>
            </tr>
        </tbody>
    </table>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Detalle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="modalBodyContent">
                   
                </div>
                <div class="modal-footer" id="modalFooter">
                    
                </div>
            </div>
        </div>
    </div>

    <!-- Spinner de carga -->
    <div id="loadingSpinner" class="loading-overlay d-none">
        <div class="spinner-border text-light" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>


    <script>
        const alertDanger = document.getElementById('alertDanger');
        const alertDangerMensaje = document.getElementById('alertDangerMensaje');
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('pdfFile');
        const fileNameSpan = document.getElementById('fileName');
        const uploadBtn = document.getElementById('uploadBtn');
        const modalBodyContent = document.getElementById('modalBodyContent');
        const modalFooter = document.getElementById('modalFooter');
        const modalElement = document.getElementById('exampleModal');
        const tableArchivosBody = document.getElementById('tableArchivosBody');
        const modal = new bootstrap.Modal(modalElement);
        
        document.addEventListener("DOMContentLoaded", function () {
            obtenerHashes();
        });

        // Carga inicial
        alertDanger.style.display = "none";
        alertDangerMensaje.innerHTML = "";

        // Vincular el clic en el área grande de arrastrar y soltar para abrir el selector de archivos
        dropArea.addEventListener('click', function () {
            fileInput.click();  // Simular el clic en el input oculto
        });        

        // Capturar el cambio de selección de archivo
        fileInput.addEventListener('change', function () {
            alertDanger.style.display = "none";
            alertDangerMensaje.innerHTML = "";

            const file = fileInput.files[0]; // Obtener el archivo arrastrado
            const fileName = fileInput.files.length > 0 ? fileInput.files[0].name : 'Ningún archivo seleccionado'; // Capturar el nombre del archivo
            fileNameSpan.textContent = fileName;  // Mostrar el nombre del archivo seleccionado
            uploadBtn.disabled = fileName === 'Ningún archivo seleccionado';  // Habilitar/deshabilitar el botón
            modalBodyContent.innerHTML = "";  // Limpiar body de modal
            modal.hide();  // Ocultar modal

            if (file.type !== "application/pdf") {
                alertDangerMensaje.innerHTML = "El archivo seleccionado no tiene un formato PDF.";
                alertDanger.style.display = "block";
                fileNameSpan.textContent = 'Ningún archivo seleccionado';
                fileInput.value = "";  // Asegurar que se limpie el selector de archivos
                uploadBtn.disabled = true;  // Deshabilitar el botón

                // Desplazar hacia la parte superior de la pantalla
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        });

        // Resaltar el área cuando el archivo se arrastra por encima
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, (e) => {
                e.preventDefault();
                dropArea.classList.add('highlight');
            });
        });

        // Quitar el resaltado cuando el archivo deja el área
        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, (e) => {
                e.preventDefault();
                dropArea.classList.remove('highlight');
            });
        });

        // Manejar el drop
        dropArea.addEventListener('drop', (e) => {
            e.preventDefault();
            if (e.dataTransfer.files.length) {
                alertDanger.style.display = "none";
                alertDangerMensaje.innerHTML = "";

                fileInput.files = e.dataTransfer.files;  // Asignar los archivos arrastrados al input
                const file = fileInput.files[0]; // Obtener el archivo arrastrado
                const fileName = fileInput.files.length > 0 ? fileInput.files[0].name : 'Ningún archivo seleccionado'; // Capturar el nombre del archivo
                fileNameSpan.textContent = fileName;  // Mostrar el nombre del archivo
                uploadBtn.disabled = fileName === 'Ningún archivo seleccionado';  // Habilitar/deshabilitar el botón
                modalBodyContent.innerHTML = "";  // Limpiar body de modal
                modalFooter.innerHTML = "";  // Limpiar footer de modal
                modal.hide();  // Ocultar modal               

                if (file.type !== "application/pdf") {
                    alertDangerMensaje.innerHTML = "El archivo seleccionado no tiene un formato PDF.";
                    alertDanger.style.display = "block";
                    fileNameSpan.textContent = 'Ningún archivo seleccionado';
                    fileInput.value = "";  // Asegurar que se limpie el selector de archivos
                    uploadBtn.disabled = true;  // Deshabilitar el botón

                    // Desplazar hacia la parte superior de la pantalla
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                }
            }
        });

        // Mostrar el PDF en el modal cuando se haga clic en el botón de "Subir PDF"
        uploadBtn.addEventListener('click', function () {
            alertDanger.style.display = "none";
            alertDangerMensaje.innerHTML = "";

            let formData = new FormData();
            let pdfFile = fileInput.files[0];

            if (!pdfFile) {
                alertDangerMensaje.innerHTML = "Por favor, seleccione un archivo PDF.";
                alertDanger.style.display = "block";

                // Desplazar hacia la parte superior de la pantalla
                window.scrollTo({ top: 0, behavior: 'smooth' });
                return;
            }

            formData.append('pdfFile', pdfFile);

            fetch('/Home/UploadPdf', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data) {
                        // Limpiar y ocultar el modal
                        modalBodyContent.innerHTML = "";  // Limpiar body de modal
                        modalFooter.innerHTML = "";  // Limpiar footer de modal
                        modal.hide();  // Ocultar modal

                        // Preparar body de modal
                        modalBodyContent.innerHTML = `
                        <div class="d-flex-column" id="areaDetalleArchivo">
                            <p class="mt-2 mb-4"><strong>Hash:</strong> ${data.hash}</p>
                            <iframe src="data:application/pdf;base64,${data.pdfBase64}" style="width: 100%; height: 600px;" frameborder="0"></iframe>
                        </div>`;

                        // Preparar footer de modal
                        modalFooter.innerHTML = `
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fa-solid fa-xmark" style="margin-right: .25rem;"></i>
                            Cancelar
                        </button>
                        <button type="button" class="btn btn-primary" onclick="guardarHash('${data.hash}', '${data.pdfBase64}');">
                            <i class="fa-solid fa-check" style="margin-right: .25rem;"></i>
                            Confirmar
                        </button>`;

                        verTransaccion(data.hash, "insert");
                    } else {
                        alertDangerMensaje.innerHTML = "Error al subir el archivo PDF.";
                        alertDanger.style.display = "block";

                        // Desplazar hacia la parte superior de la pantalla
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    }
                })
                .catch(error => {
                    alertDangerMensaje.innerHTML = `Error inesperado: ${error}`;
                    alertDanger.style.display = "block";

                    // Desplazar hacia la parte superior de la pantalla
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
        });
    </script>

    <script>
        const limpiar = () => {
            alertDanger.style.display = "none";
            alertDangerMensaje.innerHTML = "";
            fileNameSpan.textContent = 'Ningún archivo seleccionado';
            fileInput.value = "";  // Asegurar que se limpie el selector de archivos
            uploadBtn.disabled = true;  // Deshabilitar el botón

            // Desplazar hacia la parte superior de la pantalla
            window.scrollTo({ top: 0, behavior: 'smooth' });
        };

        const verTransaccion = (hash, origen) => {
            // Mostrar el spinner al iniciar la solicitud
            document.getElementById("loadingSpinner").classList.remove("d-none");

            fetch(`/BFA/GetHashData?hash=${hash}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (data.data) {
                            const { hash: hashValue, fechaYHoraStamp, numeroBloque, base64, nombreTabla, idTabla } = data.data;  // Extraer datos de `data.data`

                            if (origen === "grid") {
                                modal.hide();

                                if (base64) {
                                    modalBodyContent.innerHTML = `
                                        <div class="mt-3 mb-3 d-flex flex-column" id="vistaTransaccion">
                                            <span class="mb-1"><strong>Hash:</strong> ${hashValue}</span>
                                            <span class="mb-1"><strong>Fecha:</strong> ${fechaYHoraStamp}</span>
                                            <span class="mb-1"><strong>Bloque:</strong> ${numeroBloque}</span>
                                            <span class="mb-1"><strong>Tabla:</strong> ${nombreTabla}</span>
                                            <span class="mb-1"><strong>Id:</strong> ${idTabla}</span>
                                            <iframe class="mt-4" src="data:application/pdf;base64,${base64}" style="width: 100%; height: 600px;" frameborder="0"></iframe>
                                        </div>`;
                                }
                                else {
                                    modalBodyContent.innerHTML = `
                                        <div class="mt-3 mb-3 d-flex flex-column" id="vistaTransaccion">
                                            <span class="mb-1"><strong>Hash:</strong> ${hashValue}</span>
                                            <span class="mb-1"><strong>Fecha:</strong> ${fechaYHoraStamp}</span>
                                            <span class="mb-1"><strong>Bloque:</strong> ${numeroBloque}</span>
                                            <span class="mb-1"><strong>Tabla:</strong> ${nombreTabla}</span>
                                            <span class="mb-1"><strong>Id:</strong> ${idTabla}</span>
                                            <div class="alert alert-danger alert-dismissible fade show mt-4 mb-0 p-2 px-3" role="alert">
                                                <i class="fa-solid fa-triangle-exclamation" style="margin-right: .5rem;"></i><span>Error al recuperar el archivo desde Base de Datos.</span>
                                            </div>
                                        </div>`;
                                }
                                
                                modalFooter.innerHTML = `
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                            <i class="fa-solid fa-xmark" style="margin-right: .25rem;"></i>
                                            Cancelar
                                        </button>`;
                                modal.show();
                            }
                            if (origen === "insert") {
                                modal.hide();

                                alertDangerMensaje.innerHTML = `
                                        <div>
                                            <h5 class="mt-2 mb-2">El archivo se encuentra registrado en la BFA</h5>
                                            <span class="mb-1" style="margin-right: 8px;"><strong>Hash:</strong> ${hashValue}</span>
                                            <span class="mb-1 mx-2"><strong>Fecha:</strong> ${fechaYHoraStamp}</span>
                                            <span class="mb-1 mx-2"><strong>Bloque:</strong> ${numeroBloque}</span>
                                            <span class="mb-1 mx-2"><strong>Tabla:</strong> ${nombreTabla}</span>
                                            <span class="mb-1 mx-2"><strong>Id:</strong> ${idTabla}</span>
                                        </div>`;
                                alertDanger.style.display = "block";

                                // Desplazar hacia la parte superior de la pantalla
                                window.scrollTo({ top: 0, behavior: 'smooth' });
                            }
                        }
                        else {
                            if (origen === "insert") {
                                modal.show();
                            }
                        }
                    } else {
                        // Mostrar mensaje de error si la transacción falla
                        alertDangerMensaje.innerHTML = "Error al obtener los datos de la transacción.";
                        alertDanger.style.display = "block";

                        // Desplazar hacia la parte superior de la pantalla
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    }
                })
                .catch(error => {
                    alertDangerMensaje.innerHTML = `Error inesperado: ${error}`;
                    alertDanger.style.display = "block";

                    // Desplazar hacia la parte superior de la pantalla
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                })
                .finally(() => {
                    // Ocultar el spinner al finalizar la solicitud
                    document.getElementById("loadingSpinner").classList.add("d-none");
                });
        };

        const guardarHash = (hash, base64) => {
            console.log("HASH", hash);
            modal.hide();

            // Mostrar el spinner al iniciar la solicitud
            document.getElementById("loadingSpinner").classList.remove("d-none");

            fetch('/BFA/StoreHash', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ hash: hash, base64: base64 })  // Enviar el hash como propiedad en un objeto JSON
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        obtenerHashes();
                    } else {
                        alertDangerMensaje.innerHTML = "Error al almacenar el hash.";
                        alertDanger.style.display = "block";

                        // Desplazar hacia la parte superior de la pantalla
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    }
                })
                .catch(error => {
                    alertDangerMensaje.innerHTML = `Error inesperado: ${error}`;
                    alertDanger.style.display = "block";

                    // Desplazar hacia la parte superior de la pantalla
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                })
                .finally(() => {
                    // Ocultar el spinner al finalizar la solicitud
                    document.getElementById("loadingSpinner").classList.add("d-none");
                });
        };

        const obtenerHashes = () => {
            // Mostrar el spinner al iniciar la solicitud
            document.getElementById("loadingSpinner").classList.remove("d-none");

            fetch('/BFA/GetHashes', {
                method: 'GET',
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.data.length > 0) {
                        tableArchivosBody.innerHTML = "";  // Limpiar contenido anterior

                        // Generar las filas de la tabla con los hashes
                        data.data.forEach((hash, index) => {
                            tableArchivosBody.innerHTML += `
                                <tr>
                                    <td>${index + 1}</td>
                                    <td>${hash}</td>
                                    <td style="flex-wrap: wrap;">
                                        <div class="d-flex justify-content-center align-items-center" style="flex-wrap: wrap;">
                                            <button class="button-icon" onclick="verTransaccion('${hash}', 'grid');">
                                                <i class="fa-solid fa-eye" size="24" style="color: #0B5ED7;"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>`;
                        });
                    } else {
                        tableArchivosBody.innerHTML = `
                            <tr>
                                <td colspan="3" class="text-center">No hay resultados disponibles</td>
                            </tr>`;
                        //modalHistorico.show();  // Mostrar el modal aunque esté vacío
                    }
                })
                .catch(error => {
                    alertDangerMensaje.innerHTML = `Error inesperado: ${error}`;
                    alertDanger.style.display = "block";

                    // Desplazar hacia la parte superior de la pantalla
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                })
                .finally(() => {
                    // Ocultar el spinner al finalizar la solicitud
                    document.getElementById("loadingSpinner").classList.add("d-none");
                });
        };
    </script>
</div>
